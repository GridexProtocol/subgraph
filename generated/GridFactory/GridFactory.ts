// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GridCreated extends ethereum.Event {
  get params(): GridCreated__Params {
    return new GridCreated__Params(this);
  }
}

export class GridCreated__Params {
  _event: GridCreated;

  constructor(event: GridCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get resolution(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get grid(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ResolutionEnabled extends ethereum.Event {
  get params(): ResolutionEnabled__Params {
    return new ResolutionEnabled__Params(this);
  }
}

export class ResolutionEnabled__Params {
  _event: ResolutionEnabled;

  constructor(event: ResolutionEnabled) {
    this._event = event;
  }

  get resolution(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get takerFee(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class GridFactory__parametersResult {
  value0: Address;
  value1: Address;
  value2: i32;
  value3: i32;
  value4: Address;
  value5: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: i32,
    value3: i32,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getToken0(): Address {
    return this.value0;
  }

  getToken1(): Address {
    return this.value1;
  }

  getResolution(): i32 {
    return this.value2;
  }

  getTakerFee(): i32 {
    return this.value3;
  }

  getPriceOracle(): Address {
    return this.value4;
  }

  getWeth9(): Address {
    return this.value5;
  }
}

export class GridFactory extends ethereum.SmartContract {
  static bind(address: Address): GridFactory {
    return new GridFactory("GridFactory", address);
  }

  createGrid(tokenA: Address, tokenB: Address, resolution: i32): Address {
    let result = super.call(
      "createGrid",
      "createGrid(address,address,int24):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromI32(resolution)
      ]
    );

    return result[0].toAddress();
  }

  try_createGrid(
    tokenA: Address,
    tokenB: Address,
    resolution: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createGrid",
      "createGrid(address,address,int24):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromI32(resolution)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gridCreationCode(): Bytes {
    let result = super.call(
      "gridCreationCode",
      "gridCreationCode():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_gridCreationCode(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "gridCreationCode",
      "gridCreationCode():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  grids(param0: Address, param1: Address, param2: i32): Address {
    let result = super.call("grids", "grids(address,address,int24):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1),
      ethereum.Value.fromI32(param2)
    ]);

    return result[0].toAddress();
  }

  try_grids(
    param0: Address,
    param1: Address,
    param2: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "grids",
      "grids(address,address,int24):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromI32(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parameters(): GridFactory__parametersResult {
    let result = super.call(
      "parameters",
      "parameters():(address,address,int24,int24,address,address)",
      []
    );

    return new GridFactory__parametersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_parameters(): ethereum.CallResult<GridFactory__parametersResult> {
    let result = super.tryCall(
      "parameters",
      "parameters():(address,address,int24,int24,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GridFactory__parametersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", "priceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_priceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceOracle", "priceOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolutions(param0: i32): i32 {
    let result = super.call("resolutions", "resolutions(int24):(int24)", [
      ethereum.Value.fromI32(param0)
    ]);

    return result[0].toI32();
  }

  try_resolutions(param0: i32): ethereum.CallResult<i32> {
    let result = super.tryCall("resolutions", "resolutions(int24):(int24)", [
      ethereum.Value.fromI32(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  weth9(): Address {
    let result = super.call("weth9", "weth9():(address)", []);

    return result[0].toAddress();
  }

  try_weth9(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth9", "weth9():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _weth9(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gridPrefixCreationCode(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConcatGridSuffixCreationCodeCall extends ethereum.Call {
  get inputs(): ConcatGridSuffixCreationCodeCall__Inputs {
    return new ConcatGridSuffixCreationCodeCall__Inputs(this);
  }

  get outputs(): ConcatGridSuffixCreationCodeCall__Outputs {
    return new ConcatGridSuffixCreationCodeCall__Outputs(this);
  }
}

export class ConcatGridSuffixCreationCodeCall__Inputs {
  _call: ConcatGridSuffixCreationCodeCall;

  constructor(call: ConcatGridSuffixCreationCodeCall) {
    this._call = call;
  }

  get gridSuffixCreationCode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ConcatGridSuffixCreationCodeCall__Outputs {
  _call: ConcatGridSuffixCreationCodeCall;

  constructor(call: ConcatGridSuffixCreationCodeCall) {
    this._call = call;
  }
}

export class CreateGridCall extends ethereum.Call {
  get inputs(): CreateGridCall__Inputs {
    return new CreateGridCall__Inputs(this);
  }

  get outputs(): CreateGridCall__Outputs {
    return new CreateGridCall__Outputs(this);
  }
}

export class CreateGridCall__Inputs {
  _call: CreateGridCall;

  constructor(call: CreateGridCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get resolution(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateGridCall__Outputs {
  _call: CreateGridCall;

  constructor(call: CreateGridCall) {
    this._call = call;
  }

  get grid(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
