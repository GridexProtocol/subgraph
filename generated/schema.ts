// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GridexProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridexProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridexProtocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridexProtocol", id.toString(), this);
    }
  }

  static load(id: string): GridexProtocol | null {
    return changetype<GridexProtocol | null>(store.get("GridexProtocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get gridCount(): BigInt {
    let value = this.get("gridCount");
    return value!.toBigInt();
  }

  set gridCount(value: BigInt) {
    this.set("gridCount", Value.fromBigInt(value));
  }

  get orderCount(): BigInt {
    let value = this.get("orderCount");
    return value!.toBigInt();
  }

  set orderCount(value: BigInt) {
    this.set("orderCount", Value.fromBigInt(value));
  }

  get flashCount(): BigInt {
    let value = this.get("flashCount");
    return value!.toBigInt();
  }

  set flashCount(value: BigInt) {
    this.set("flashCount", Value.fromBigInt(value));
  }

  get swapCount(): BigInt {
    let value = this.get("swapCount");
    return value!.toBigInt();
  }

  set swapCount(value: BigInt) {
    this.set("swapCount", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    return value!.toBigInt();
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get gridCount(): BigInt {
    let value = this.get("gridCount");
    return value!.toBigInt();
  }

  set gridCount(value: BigInt) {
    this.set("gridCount", Value.fromBigInt(value));
  }

  get totalLocked(): BigInt {
    let value = this.get("totalLocked");
    return value!.toBigInt();
  }

  set totalLocked(value: BigInt) {
    this.set("totalLocked", Value.fromBigInt(value));
  }
}

export class Grid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Grid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Grid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Grid", id.toString(), this);
    }
  }

  static load(id: string): Grid | null {
    return changetype<Grid | null>(store.get("Grid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get resolution(): i32 {
    let value = this.get("resolution");
    return value!.toI32();
  }

  set resolution(value: i32) {
    this.set("resolution", Value.fromI32(value));
  }

  get takerFee(): i32 {
    let value = this.get("takerFee");
    return value!.toI32();
  }

  set takerFee(value: i32) {
    this.set("takerFee", Value.fromI32(value));
  }

  get boundary(): i32 {
    let value = this.get("boundary");
    return value!.toI32();
  }

  set boundary(value: i32) {
    this.set("boundary", Value.fromI32(value));
  }

  get priceX96(): BigInt {
    let value = this.get("priceX96");
    return value!.toBigInt();
  }

  set priceX96(value: BigInt) {
    this.set("priceX96", Value.fromBigInt(value));
  }

  get price0(): BigDecimal {
    let value = this.get("price0");
    return value!.toBigDecimal();
  }

  set price0(value: BigDecimal) {
    this.set("price0", Value.fromBigDecimal(value));
  }

  get price1(): BigDecimal {
    let value = this.get("price1");
    return value!.toBigDecimal();
  }

  set price1(value: BigDecimal) {
    this.set("price1", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get locked0(): BigInt {
    let value = this.get("locked0");
    return value!.toBigInt();
  }

  set locked0(value: BigInt) {
    this.set("locked0", Value.fromBigInt(value));
  }

  get locked1(): BigInt {
    let value = this.get("locked1");
    return value!.toBigInt();
  }

  set locked1(value: BigInt) {
    this.set("locked1", Value.fromBigInt(value));
  }

  get orderCount(): BigInt {
    let value = this.get("orderCount");
    return value!.toBigInt();
  }

  set orderCount(value: BigInt) {
    this.set("orderCount", Value.fromBigInt(value));
  }

  get flashCount(): BigInt {
    let value = this.get("flashCount");
    return value!.toBigInt();
  }

  set flashCount(value: BigInt) {
    this.set("flashCount", Value.fromBigInt(value));
  }

  get swapCount(): BigInt {
    let value = this.get("swapCount");
    return value!.toBigInt();
  }

  set swapCount(value: BigInt) {
    this.set("swapCount", Value.fromBigInt(value));
  }

  get transactionHistories(): Array<string> {
    let value = this.get("transactionHistories");
    return value!.toStringArray();
  }

  set transactionHistories(value: Array<string>) {
    this.set("transactionHistories", Value.fromStringArray(value));
  }

  get boundaries(): Array<string> {
    let value = this.get("boundaries");
    return value!.toStringArray();
  }

  set boundaries(value: Array<string>) {
    this.set("boundaries", Value.fromStringArray(value));
  }

  get bundles(): Array<string> {
    let value = this.get("bundles");
    return value!.toStringArray();
  }

  set bundles(value: Array<string>) {
    this.set("bundles", Value.fromStringArray(value));
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value!.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }

  get candles1M(): Array<string> {
    let value = this.get("candles1M");
    return value!.toStringArray();
  }

  set candles1M(value: Array<string>) {
    this.set("candles1M", Value.fromStringArray(value));
  }

  get candles5M(): Array<string> {
    let value = this.get("candles5M");
    return value!.toStringArray();
  }

  set candles5M(value: Array<string>) {
    this.set("candles5M", Value.fromStringArray(value));
  }

  get candles15M(): Array<string> {
    let value = this.get("candles15M");
    return value!.toStringArray();
  }

  set candles15M(value: Array<string>) {
    this.set("candles15M", Value.fromStringArray(value));
  }

  get candles30M(): Array<string> {
    let value = this.get("candles30M");
    return value!.toStringArray();
  }

  set candles30M(value: Array<string>) {
    this.set("candles30M", Value.fromStringArray(value));
  }

  get candles1H(): Array<string> {
    let value = this.get("candles1H");
    return value!.toStringArray();
  }

  set candles1H(value: Array<string>) {
    this.set("candles1H", Value.fromStringArray(value));
  }

  get candles4H(): Array<string> {
    let value = this.get("candles4H");
    return value!.toStringArray();
  }

  set candles4H(value: Array<string>) {
    this.set("candles4H", Value.fromStringArray(value));
  }

  get candles1D(): Array<string> {
    let value = this.get("candles1D");
    return value!.toStringArray();
  }

  set candles1D(value: Array<string>) {
    this.set("candles1D", Value.fromStringArray(value));
  }
}

export class Resolution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Resolution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Resolution", id.toString(), this);
    }
  }

  static load(id: string): Resolution | null {
    return changetype<Resolution | null>(store.get("Resolution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolution(): i32 {
    let value = this.get("resolution");
    return value!.toI32();
  }

  set resolution(value: i32) {
    this.set("resolution", Value.fromI32(value));
  }

  get takerFee(): i32 {
    let value = this.get("takerFee");
    return value!.toI32();
  }

  set takerFee(value: i32) {
    this.set("takerFee", Value.fromI32(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bundle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bundle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bundle", id.toString(), this);
    }
  }

  static load(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get("Bundle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get bundleId(): BigInt {
    let value = this.get("bundleId");
    return value!.toBigInt();
  }

  set bundleId(value: BigInt) {
    this.set("bundleId", Value.fromBigInt(value));
  }

  get boundaryLower(): i32 {
    let value = this.get("boundaryLower");
    return value!.toI32();
  }

  set boundaryLower(value: i32) {
    this.set("boundaryLower", Value.fromI32(value));
  }

  get zero(): boolean {
    let value = this.get("zero");
    return value!.toBoolean();
  }

  set zero(value: boolean) {
    this.set("zero", Value.fromBoolean(value));
  }

  get makerAmountTotal(): BigInt {
    let value = this.get("makerAmountTotal");
    return value!.toBigInt();
  }

  set makerAmountTotal(value: BigInt) {
    this.set("makerAmountTotal", Value.fromBigInt(value));
  }

  get makerAmountRemaining(): BigInt {
    let value = this.get("makerAmountRemaining");
    return value!.toBigInt();
  }

  set makerAmountRemaining(value: BigInt) {
    this.set("makerAmountRemaining", Value.fromBigInt(value));
  }

  get takerAmountRemaining(): BigInt {
    let value = this.get("takerAmountRemaining");
    return value!.toBigInt();
  }

  set takerAmountRemaining(value: BigInt) {
    this.set("takerAmountRemaining", Value.fromBigInt(value));
  }

  get takerFeeAmountRemaining(): BigInt {
    let value = this.get("takerFeeAmountRemaining");
    return value!.toBigInt();
  }

  set takerFeeAmountRemaining(value: BigInt) {
    this.set("takerFeeAmountRemaining", Value.fromBigInt(value));
  }

  get orderCount(): BigInt {
    let value = this.get("orderCount");
    return value!.toBigInt();
  }

  set orderCount(value: BigInt) {
    this.set("orderCount", Value.fromBigInt(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get bundle(): string {
    let value = this.get("bundle");
    return value!.toString();
  }

  set bundle(value: string) {
    this.set("bundle", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get zero(): boolean {
    let value = this.get("zero");
    return value!.toBoolean();
  }

  set zero(value: boolean) {
    this.set("zero", Value.fromBoolean(value));
  }

  get settled(): boolean {
    let value = this.get("settled");
    return value!.toBoolean();
  }

  set settled(value: boolean) {
    this.set("settled", Value.fromBoolean(value));
  }

  get boundaryLower(): i32 {
    let value = this.get("boundaryLower");
    return value!.toI32();
  }

  set boundaryLower(value: i32) {
    this.set("boundaryLower", Value.fromI32(value));
  }

  get makerAmountIn(): BigInt {
    let value = this.get("makerAmountIn");
    return value!.toBigInt();
  }

  set makerAmountIn(value: BigInt) {
    this.set("makerAmountIn", Value.fromBigInt(value));
  }

  get makerAmountOut(): BigInt {
    let value = this.get("makerAmountOut");
    return value!.toBigInt();
  }

  set makerAmountOut(value: BigInt) {
    this.set("makerAmountOut", Value.fromBigInt(value));
  }

  get takerAmountOut(): BigInt {
    let value = this.get("takerAmountOut");
    return value!.toBigInt();
  }

  set takerAmountOut(value: BigInt) {
    this.set("takerAmountOut", Value.fromBigInt(value));
  }

  get takerFeeAmountOut(): BigInt {
    let value = this.get("takerFeeAmountOut");
    return value!.toBigInt();
  }

  set takerFeeAmountOut(value: BigInt) {
    this.set("takerFeeAmountOut", Value.fromBigInt(value));
  }

  get avgPrice(): BigDecimal {
    let value = this.get("avgPrice");
    return value!.toBigDecimal();
  }

  set avgPrice(value: BigDecimal) {
    this.set("avgPrice", Value.fromBigDecimal(value));
  }
}

export class Boundary extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Boundary entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Boundary must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Boundary", id.toString(), this);
    }
  }

  static load(id: string): Boundary | null {
    return changetype<Boundary | null>(store.get("Boundary", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get boundary(): i32 {
    let value = this.get("boundary");
    return value!.toI32();
  }

  set boundary(value: i32) {
    this.set("boundary", Value.fromI32(value));
  }

  get zero(): boolean {
    let value = this.get("zero");
    return value!.toBoolean();
  }

  set zero(value: boolean) {
    this.set("zero", Value.fromBoolean(value));
  }

  get makerAmountRemaining(): BigInt {
    let value = this.get("makerAmountRemaining");
    return value!.toBigInt();
  }

  set makerAmountRemaining(value: BigInt) {
    this.set("makerAmountRemaining", Value.fromBigInt(value));
  }
}

export class GridCandle1M extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle1M entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle1M must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle1M", id.toString(), this);
    }
  }

  static load(id: string): GridCandle1M | null {
    return changetype<GridCandle1M | null>(store.get("GridCandle1M", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class GridCandle5M extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle5M entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle5M must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle5M", id.toString(), this);
    }
  }

  static load(id: string): GridCandle5M | null {
    return changetype<GridCandle5M | null>(store.get("GridCandle5M", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class GridCandle15M extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle15M entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle15M must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle15M", id.toString(), this);
    }
  }

  static load(id: string): GridCandle15M | null {
    return changetype<GridCandle15M | null>(store.get("GridCandle15M", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class GridCandle30M extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle30M entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle30M must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle30M", id.toString(), this);
    }
  }

  static load(id: string): GridCandle30M | null {
    return changetype<GridCandle30M | null>(store.get("GridCandle30M", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class GridCandle1H extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle1H entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle1H must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle1H", id.toString(), this);
    }
  }

  static load(id: string): GridCandle1H | null {
    return changetype<GridCandle1H | null>(store.get("GridCandle1H", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class GridCandle4H extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle4H entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle4H must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle4H", id.toString(), this);
    }
  }

  static load(id: string): GridCandle4H | null {
    return changetype<GridCandle4H | null>(store.get("GridCandle4H", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class GridCandle1D extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GridCandle1D entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GridCandle1D must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GridCandle1D", id.toString(), this);
    }
  }

  static load(id: string): GridCandle1D | null {
    return changetype<GridCandle1D | null>(store.get("GridCandle1D", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }

  get volume0(): BigInt {
    let value = this.get("volume0");
    return value!.toBigInt();
  }

  set volume0(value: BigInt) {
    this.set("volume0", Value.fromBigInt(value));
  }

  get volume1(): BigInt {
    let value = this.get("volume1");
    return value!.toBigInt();
  }

  set volume1(value: BigInt) {
    this.set("volume1", Value.fromBigInt(value));
  }

  get fee0(): BigInt {
    let value = this.get("fee0");
    return value!.toBigInt();
  }

  set fee0(value: BigInt) {
    this.set("fee0", Value.fromBigInt(value));
  }

  get fee1(): BigInt {
    let value = this.get("fee1");
    return value!.toBigInt();
  }

  set fee1(value: BigInt) {
    this.set("fee1", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class TransactionHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransactionHistory", id.toString(), this);
    }
  }

  static load(id: string): TransactionHistory | null {
    return changetype<TransactionHistory | null>(
      store.get("TransactionHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grid(): string {
    let value = this.get("grid");
    return value!.toString();
  }

  set grid(value: string) {
    this.set("grid", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    return value!.toBigInt();
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    return value!.toBigInt();
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get amountTakerFee(): BigInt {
    let value = this.get("amountTakerFee");
    return value!.toBigInt();
  }

  set amountTakerFee(value: BigInt) {
    this.set("amountTakerFee", Value.fromBigInt(value));
  }

  get avgPrice(): BigDecimal {
    let value = this.get("avgPrice");
    return value!.toBigDecimal();
  }

  set avgPrice(value: BigDecimal) {
    this.set("avgPrice", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
