// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChangeBundleForSettleOrder extends ethereum.Event {
  get params(): ChangeBundleForSettleOrder__Params {
    return new ChangeBundleForSettleOrder__Params(this);
  }
}

export class ChangeBundleForSettleOrder__Params {
  _event: ChangeBundleForSettleOrder;

  constructor(event: ChangeBundleForSettleOrder) {
    this._event = event;
  }

  get bundleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get makerAmountTotal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get makerAmountRemaining(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChangeBundleForSwap extends ethereum.Event {
  get params(): ChangeBundleForSwap__Params {
    return new ChangeBundleForSwap__Params(this);
  }
}

export class ChangeBundleForSwap__Params {
  _event: ChangeBundleForSwap;

  constructor(event: ChangeBundleForSwap) {
    this._event = event;
  }

  get bundleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get makerAmountRemaining(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get takerFeeAmountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Flash extends ethereum.Event {
  get params(): Flash__Params {
    return new Flash__Params(this);
  }
}

export class Flash__Params {
  _event: Flash;

  constructor(event: Flash) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paid0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paid1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this);
  }
}

export class Initialize__Params {
  _event: Initialize;

  constructor(event: Initialize) {
    this._event = event;
  }

  get priceX96(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get boundary(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class PlaceMakerOrder extends ethereum.Event {
  get params(): PlaceMakerOrder__Params {
    return new PlaceMakerOrder__Params(this);
  }
}

export class PlaceMakerOrder__Params {
  _event: PlaceMakerOrder;

  constructor(event: PlaceMakerOrder) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bundleId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get zero(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get boundaryLower(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SettleMakerOrder extends ethereum.Event {
  get params(): SettleMakerOrder__Params {
    return new SettleMakerOrder__Params(this);
  }
}

export class SettleMakerOrder__Params {
  _event: SettleMakerOrder;

  constructor(event: SettleMakerOrder) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get makerAmountOut(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get takerAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get takerFeeAmountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get priceX96(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get boundary(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class Grid__boundaries0Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBundle0Id(): BigInt {
    return this.value0;
  }

  getBundle1Id(): BigInt {
    return this.value1;
  }

  getMakerAmountRemaining(): BigInt {
    return this.value2;
  }
}

export class Grid__boundaries1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBundle0Id(): BigInt {
    return this.value0;
  }

  getBundle1Id(): BigInt {
    return this.value1;
  }

  getMakerAmountRemaining(): BigInt {
    return this.value2;
  }
}

export class Grid__bundlesResult {
  value0: i32;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: i32,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getBoundaryLower(): i32 {
    return this.value0;
  }

  getZero(): boolean {
    return this.value1;
  }

  getMakerAmountTotal(): BigInt {
    return this.value2;
  }

  getMakerAmountRemaining(): BigInt {
    return this.value3;
  }

  getTakerAmountRemaining(): BigInt {
    return this.value4;
  }

  getTakerFeeAmountRemaining(): BigInt {
    return this.value5;
  }
}

export class Grid__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Grid__initializeResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getOrderIds0(): Array<BigInt> {
    return this.value0;
  }

  getOrderIds1(): Array<BigInt> {
    return this.value1;
  }
}

export class Grid__initializeInputParametersStruct extends ethereum.Tuple {
  get priceX96(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get orders0(): Array<Grid__initializeInputParametersOrders0Struct> {
    return this[2].toTupleArray<Grid__initializeInputParametersOrders0Struct>();
  }

  get orders1(): Array<Grid__initializeInputParametersOrders1Struct> {
    return this[3].toTupleArray<Grid__initializeInputParametersOrders1Struct>();
  }
}

export class Grid__initializeInputParametersOrders0Struct extends ethereum.Tuple {
  get boundaryLower(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Grid__initializeInputParametersOrders1Struct extends ethereum.Tuple {
  get boundaryLower(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Grid__ordersResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBundleId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }
}

export class Grid__placeMakerOrderInputParametersStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get zero(): boolean {
    return this[1].toBoolean();
  }

  get boundaryLower(): i32 {
    return this[2].toI32();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }
}

export class Grid__placeMakerOrderInBatchInputParametersStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get zero(): boolean {
    return this[1].toBoolean();
  }

  get orders(): Array<Grid__placeMakerOrderInBatchInputParametersOrdersStruct> {
    return this[2].toTupleArray<
      Grid__placeMakerOrderInBatchInputParametersOrdersStruct
    >();
  }
}

export class Grid__placeMakerOrderInBatchInputParametersOrdersStruct extends ethereum.Tuple {
  get boundaryLower(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Grid__settleMakerOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Grid__settleMakerOrderAndCollectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Grid__settleMakerOrderAndCollectInBatchResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0Total(): BigInt {
    return this.value0;
  }

  getAmount1Total(): BigInt {
    return this.value1;
  }
}

export class Grid__slot0Result {
  value0: BigInt;
  value1: i32;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: i32, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getPriceX96(): BigInt {
    return this.value0;
  }

  getBoundary(): i32 {
    return this.value1;
  }

  getBlockTimestamp(): BigInt {
    return this.value2;
  }

  getUnlocked(): boolean {
    return this.value3;
  }
}

export class Grid__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Grid__tokensOwedsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getToken0(): BigInt {
    return this.value0;
  }

  getToken1(): BigInt {
    return this.value1;
  }
}

export class Grid extends ethereum.SmartContract {
  static bind(address: Address): Grid {
    return new Grid("Grid", address);
  }

  boundaries0(param0: i32): Grid__boundaries0Result {
    let result = super.call(
      "boundaries0",
      "boundaries0(int24):(uint64,uint64,uint128)",
      [ethereum.Value.fromI32(param0)]
    );

    return new Grid__boundaries0Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_boundaries0(param0: i32): ethereum.CallResult<Grid__boundaries0Result> {
    let result = super.tryCall(
      "boundaries0",
      "boundaries0(int24):(uint64,uint64,uint128)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__boundaries0Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  boundaries1(param0: i32): Grid__boundaries1Result {
    let result = super.call(
      "boundaries1",
      "boundaries1(int24):(uint64,uint64,uint128)",
      [ethereum.Value.fromI32(param0)]
    );

    return new Grid__boundaries1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_boundaries1(param0: i32): ethereum.CallResult<Grid__boundaries1Result> {
    let result = super.tryCall(
      "boundaries1",
      "boundaries1(int24):(uint64,uint64,uint128)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__boundaries1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  boundaryBitmaps0(param0: i32): BigInt {
    let result = super.call(
      "boundaryBitmaps0",
      "boundaryBitmaps0(int16):(uint256)",
      [ethereum.Value.fromI32(param0)]
    );

    return result[0].toBigInt();
  }

  try_boundaryBitmaps0(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "boundaryBitmaps0",
      "boundaryBitmaps0(int16):(uint256)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  boundaryBitmaps1(param0: i32): BigInt {
    let result = super.call(
      "boundaryBitmaps1",
      "boundaryBitmaps1(int16):(uint256)",
      [ethereum.Value.fromI32(param0)]
    );

    return result[0].toBigInt();
  }

  try_boundaryBitmaps1(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "boundaryBitmaps1",
      "boundaryBitmaps1(int16):(uint256)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bundles(param0: BigInt): Grid__bundlesResult {
    let result = super.call(
      "bundles",
      "bundles(uint64):(int24,bool,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Grid__bundlesResult(
      result[0].toI32(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_bundles(param0: BigInt): ethereum.CallResult<Grid__bundlesResult> {
    let result = super.tryCall(
      "bundles",
      "bundles(uint64):(int24,bool,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__bundlesResult(
        value[0].toI32(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  collect(
    recipient: Address,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): Grid__collectResult {
    let result = super.call(
      "collect",
      "collect(address,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );

    return new Grid__collectResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_collect(
    recipient: Address,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): ethereum.CallResult<Grid__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  initialize(
    parameters: Grid__initializeInputParametersStruct,
    data: Bytes
  ): Grid__initializeResult {
    let result = super.call(
      "initialize",
      "initialize((uint160,address,(int24,uint128)[],(int24,uint128)[]),bytes):(uint256[],uint256[])",
      [ethereum.Value.fromTuple(parameters), ethereum.Value.fromBytes(data)]
    );

    return new Grid__initializeResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_initialize(
    parameters: Grid__initializeInputParametersStruct,
    data: Bytes
  ): ethereum.CallResult<Grid__initializeResult> {
    let result = super.tryCall(
      "initialize",
      "initialize((uint160,address,(int24,uint128)[],(int24,uint128)[]),bytes):(uint256[],uint256[])",
      [ethereum.Value.fromTuple(parameters), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__initializeResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  orders(param0: BigInt): Grid__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(uint64,address,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Grid__ordersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<Grid__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(uint64,address,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__ordersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  placeMakerOrder(
    parameters: Grid__placeMakerOrderInputParametersStruct,
    data: Bytes
  ): BigInt {
    let result = super.call(
      "placeMakerOrder",
      "placeMakerOrder((address,bool,int24,uint128),bytes):(uint256)",
      [ethereum.Value.fromTuple(parameters), ethereum.Value.fromBytes(data)]
    );

    return result[0].toBigInt();
  }

  try_placeMakerOrder(
    parameters: Grid__placeMakerOrderInputParametersStruct,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeMakerOrder",
      "placeMakerOrder((address,bool,int24,uint128),bytes):(uint256)",
      [ethereum.Value.fromTuple(parameters), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  placeMakerOrderInBatch(
    parameters: Grid__placeMakerOrderInBatchInputParametersStruct,
    data: Bytes
  ): Array<BigInt> {
    let result = super.call(
      "placeMakerOrderInBatch",
      "placeMakerOrderInBatch((address,bool,(int24,uint128)[]),bytes):(uint256[])",
      [ethereum.Value.fromTuple(parameters), ethereum.Value.fromBytes(data)]
    );

    return result[0].toBigIntArray();
  }

  try_placeMakerOrderInBatch(
    parameters: Grid__placeMakerOrderInBatchInputParametersStruct,
    data: Bytes
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "placeMakerOrderInBatch",
      "placeMakerOrderInBatch((address,bool,(int24,uint128)[]),bytes):(uint256[])",
      [ethereum.Value.fromTuple(parameters), ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  resolution(): i32 {
    let result = super.call("resolution", "resolution():(int24)", []);

    return result[0].toI32();
  }

  try_resolution(): ethereum.CallResult<i32> {
    let result = super.tryCall("resolution", "resolution():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  settleMakerOrder(orderId: BigInt): Grid__settleMakerOrderResult {
    let result = super.call(
      "settleMakerOrder",
      "settleMakerOrder(uint256):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return new Grid__settleMakerOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_settleMakerOrder(
    orderId: BigInt
  ): ethereum.CallResult<Grid__settleMakerOrderResult> {
    let result = super.tryCall(
      "settleMakerOrder",
      "settleMakerOrder(uint256):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__settleMakerOrderResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  settleMakerOrderAndCollect(
    recipient: Address,
    orderId: BigInt,
    unwrapWETH9: boolean
  ): Grid__settleMakerOrderAndCollectResult {
    let result = super.call(
      "settleMakerOrderAndCollect",
      "settleMakerOrderAndCollect(address,uint256,bool):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(orderId),
        ethereum.Value.fromBoolean(unwrapWETH9)
      ]
    );

    return new Grid__settleMakerOrderAndCollectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_settleMakerOrderAndCollect(
    recipient: Address,
    orderId: BigInt,
    unwrapWETH9: boolean
  ): ethereum.CallResult<Grid__settleMakerOrderAndCollectResult> {
    let result = super.tryCall(
      "settleMakerOrderAndCollect",
      "settleMakerOrderAndCollect(address,uint256,bool):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(orderId),
        ethereum.Value.fromBoolean(unwrapWETH9)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__settleMakerOrderAndCollectResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  settleMakerOrderAndCollectInBatch(
    recipient: Address,
    orderIds: Array<BigInt>,
    unwrapWETH9: boolean
  ): Grid__settleMakerOrderAndCollectInBatchResult {
    let result = super.call(
      "settleMakerOrderAndCollectInBatch",
      "settleMakerOrderAndCollectInBatch(address,uint256[],bool):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(orderIds),
        ethereum.Value.fromBoolean(unwrapWETH9)
      ]
    );

    return new Grid__settleMakerOrderAndCollectInBatchResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_settleMakerOrderAndCollectInBatch(
    recipient: Address,
    orderIds: Array<BigInt>,
    unwrapWETH9: boolean
  ): ethereum.CallResult<Grid__settleMakerOrderAndCollectInBatchResult> {
    let result = super.tryCall(
      "settleMakerOrderAndCollectInBatch",
      "settleMakerOrderAndCollectInBatch(address,uint256[],bool):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(orderIds),
        ethereum.Value.fromBoolean(unwrapWETH9)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__settleMakerOrderAndCollectInBatchResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  slot0(): Grid__slot0Result {
    let result = super.call("slot0", "slot0():(uint160,int24,uint32,bool)", []);

    return new Grid__slot0Result(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_slot0(): ethereum.CallResult<Grid__slot0Result> {
    let result = super.tryCall(
      "slot0",
      "slot0():(uint160,int24,uint32,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__slot0Result(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  swap(
    recipient: Address,
    zeroForOne: boolean,
    amountSpecified: BigInt,
    priceLimitX96: BigInt,
    data: Bytes
  ): Grid__swapResult {
    let result = super.call(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromSignedBigInt(amountSpecified),
        ethereum.Value.fromUnsignedBigInt(priceLimitX96),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Grid__swapResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_swap(
    recipient: Address,
    zeroForOne: boolean,
    amountSpecified: BigInt,
    priceLimitX96: BigInt,
    data: Bytes
  ): ethereum.CallResult<Grid__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromSignedBigInt(amountSpecified),
        ethereum.Value.fromUnsignedBigInt(priceLimitX96),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__swapResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  takerFee(): i32 {
    let result = super.call("takerFee", "takerFee():(int24)", []);

    return result[0].toI32();
  }

  try_takerFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("takerFee", "takerFee():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensOweds(param0: Address): Grid__tokensOwedsResult {
    let result = super.call(
      "tokensOweds",
      "tokensOweds(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Grid__tokensOwedsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_tokensOweds(
    param0: Address
  ): ethereum.CallResult<Grid__tokensOwedsResult> {
    let result = super.tryCall(
      "tokensOweds",
      "tokensOweds(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Grid__tokensOwedsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0Requested(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1Requested(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class FlashCall extends ethereum.Call {
  get inputs(): FlashCall__Inputs {
    return new FlashCall__Inputs(this);
  }

  get outputs(): FlashCall__Outputs {
    return new FlashCall__Outputs(this);
  }
}

export class FlashCall__Inputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashCall__Outputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get parameters(): InitializeCallParametersStruct {
    return changetype<InitializeCallParametersStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get orderIds0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get orderIds1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class InitializeCallParametersStruct extends ethereum.Tuple {
  get priceX96(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get orders0(): Array<InitializeCallParametersOrders0Struct> {
    return this[2].toTupleArray<InitializeCallParametersOrders0Struct>();
  }

  get orders1(): Array<InitializeCallParametersOrders1Struct> {
    return this[3].toTupleArray<InitializeCallParametersOrders1Struct>();
  }
}

export class InitializeCallParametersOrders0Struct extends ethereum.Tuple {
  get boundaryLower(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class InitializeCallParametersOrders1Struct extends ethereum.Tuple {
  get boundaryLower(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class PlaceMakerOrderCall extends ethereum.Call {
  get inputs(): PlaceMakerOrderCall__Inputs {
    return new PlaceMakerOrderCall__Inputs(this);
  }

  get outputs(): PlaceMakerOrderCall__Outputs {
    return new PlaceMakerOrderCall__Outputs(this);
  }
}

export class PlaceMakerOrderCall__Inputs {
  _call: PlaceMakerOrderCall;

  constructor(call: PlaceMakerOrderCall) {
    this._call = call;
  }

  get parameters(): PlaceMakerOrderCallParametersStruct {
    return changetype<PlaceMakerOrderCallParametersStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PlaceMakerOrderCall__Outputs {
  _call: PlaceMakerOrderCall;

  constructor(call: PlaceMakerOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PlaceMakerOrderCallParametersStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get zero(): boolean {
    return this[1].toBoolean();
  }

  get boundaryLower(): i32 {
    return this[2].toI32();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }
}

export class PlaceMakerOrderInBatchCall extends ethereum.Call {
  get inputs(): PlaceMakerOrderInBatchCall__Inputs {
    return new PlaceMakerOrderInBatchCall__Inputs(this);
  }

  get outputs(): PlaceMakerOrderInBatchCall__Outputs {
    return new PlaceMakerOrderInBatchCall__Outputs(this);
  }
}

export class PlaceMakerOrderInBatchCall__Inputs {
  _call: PlaceMakerOrderInBatchCall;

  constructor(call: PlaceMakerOrderInBatchCall) {
    this._call = call;
  }

  get parameters(): PlaceMakerOrderInBatchCallParametersStruct {
    return changetype<PlaceMakerOrderInBatchCallParametersStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PlaceMakerOrderInBatchCall__Outputs {
  _call: PlaceMakerOrderInBatchCall;

  constructor(call: PlaceMakerOrderInBatchCall) {
    this._call = call;
  }

  get orderIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class PlaceMakerOrderInBatchCallParametersStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get zero(): boolean {
    return this[1].toBoolean();
  }

  get orders(): Array<PlaceMakerOrderInBatchCallParametersOrdersStruct> {
    return this[2].toTupleArray<
      PlaceMakerOrderInBatchCallParametersOrdersStruct
    >();
  }
}

export class PlaceMakerOrderInBatchCallParametersOrdersStruct extends ethereum.Tuple {
  get boundaryLower(): i32 {
    return this[0].toI32();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class SettleMakerOrderCall extends ethereum.Call {
  get inputs(): SettleMakerOrderCall__Inputs {
    return new SettleMakerOrderCall__Inputs(this);
  }

  get outputs(): SettleMakerOrderCall__Outputs {
    return new SettleMakerOrderCall__Outputs(this);
  }
}

export class SettleMakerOrderCall__Inputs {
  _call: SettleMakerOrderCall;

  constructor(call: SettleMakerOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleMakerOrderCall__Outputs {
  _call: SettleMakerOrderCall;

  constructor(call: SettleMakerOrderCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SettleMakerOrderAndCollectCall extends ethereum.Call {
  get inputs(): SettleMakerOrderAndCollectCall__Inputs {
    return new SettleMakerOrderAndCollectCall__Inputs(this);
  }

  get outputs(): SettleMakerOrderAndCollectCall__Outputs {
    return new SettleMakerOrderAndCollectCall__Outputs(this);
  }
}

export class SettleMakerOrderAndCollectCall__Inputs {
  _call: SettleMakerOrderAndCollectCall;

  constructor(call: SettleMakerOrderAndCollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unwrapWETH9(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SettleMakerOrderAndCollectCall__Outputs {
  _call: SettleMakerOrderAndCollectCall;

  constructor(call: SettleMakerOrderAndCollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SettleMakerOrderAndCollectInBatchCall extends ethereum.Call {
  get inputs(): SettleMakerOrderAndCollectInBatchCall__Inputs {
    return new SettleMakerOrderAndCollectInBatchCall__Inputs(this);
  }

  get outputs(): SettleMakerOrderAndCollectInBatchCall__Outputs {
    return new SettleMakerOrderAndCollectInBatchCall__Outputs(this);
  }
}

export class SettleMakerOrderAndCollectInBatchCall__Inputs {
  _call: SettleMakerOrderAndCollectInBatchCall;

  constructor(call: SettleMakerOrderAndCollectInBatchCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get unwrapWETH9(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SettleMakerOrderAndCollectInBatchCall__Outputs {
  _call: SettleMakerOrderAndCollectInBatchCall;

  constructor(call: SettleMakerOrderAndCollectInBatchCall) {
    this._call = call;
  }

  get amount0Total(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1Total(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get amountSpecified(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get priceLimitX96(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
